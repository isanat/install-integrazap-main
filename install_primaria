#!/bin/bash

# reset shell colors
tput init

# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# required imports
source "${PROJECT_ROOT}"/variables/manifest.sh
source "${PROJECT_ROOT}"/utils/manifest.sh
source "${PROJECT_ROOT}"/lib/manifest.sh

# user configs file
if [[ ! -e "${PROJECT_ROOT}"/config ]]; then
  cat << EOF > "${PROJECT_ROOT}"/config
deploy_password=${deploy_password}
mysql_root_password=${mysql_root_password}
db_pass=${db_pass}
EOF
fi

# this file has passwords
sudo su - root <<EOF
chown root:root "${PROJECT_ROOT}"/config
chmod 700 "${PROJECT_ROOT}"/config
EOF
source "${PROJECT_ROOT}"/config

# interactive CLI
inquiry_options

# dependencies related
system_update

# Verificar se Node.js está instalado
if ! node -v > /dev/null 2>&1; then
  echo "Node.js não encontrado, instalando..."
  system_node_install
else
  echo "Node.js já está instalado, versão: $(node -v)"
fi

# Verificar se PM2 está instalado
if ! pm2 -v > /dev/null 2>&1; then
  echo "PM2 não encontrado, instalando..."
  system_pm2_install
else
  echo "PM2 já está instalado, versão: $(pm2 -v)"
fi

# Verificar se Docker está instalado
if ! docker -v > /dev/null 2>&1; then
  echo "Docker não encontrado, instalando..."
  system_docker_install
else
  echo "Docker já está instalado, versão: $(docker -v)"
fi

# Instalar outras dependências necessárias
system_puppeteer_dependencies
system_snapd_install

# Verificar se NGINX está instalado
if ! nginx -v > /dev/null 2>&1; then
  echo "NGINX não encontrado, instalando..."
  system_nginx_install
else
  echo "NGINX já está instalado, versão: $(nginx -v)"
fi

# Verificar se SSL está configurado antes de instalar Certbot
if ! sudo certbot certificates > /dev/null 2>&1; then
  echo "Certbot não encontrado ou SSL não configurado, instalando e configurando Certbot..."
  system_certbot_install
  system_certbot_setup
else
  echo "SSL já está configurado com Certbot."
fi

# system config
system_create_user

# backend related
system_git_clone
backend_set_env

# Criar banco de dados MySQL (substituindo o backend_redis_create anterior)
backend_mysql_create() {
  echo "Criando banco de dados MySQL e usuário..."
  sudo mysql -u root -p${mysql_root_password} <<MYSQL_SCRIPT
CREATE DATABASE IF NOT EXISTS ${instancia_add};
CREATE USER IF NOT EXISTS '${instancia_add}'@'localhost' IDENTIFIED BY '${db_pass}';
GRANT ALL PRIVILEGES ON ${instancia_add}.* TO '${instancia_add}'@'localhost';
FLUSH PRIVILEGES;
MYSQL_SCRIPT
}
backend_mysql_create

backend_node_dependencies
backend_node_build
backend_db_migrate
backend_db_seed
backend_start_pm2
backend_nginx_setup

# frontend related
frontend_set_env
frontend_node_dependencies
frontend_node_build
frontend_start_pm2
frontend_nginx_setup

# network related
system_nginx_conf
system_nginx_restart

# Finalizar se SSL ainda não estiver configurado
if ! sudo certbot certificates > /dev/null 2>&1; then
  echo "Configurando Certbot para SSL..."
  system_certbot_setup
else
  echo "Certbot já configurado."
fi

